(()=>{"use strict";const e=(()=>{let e={};const t=e=>Math.round(9*e/5+32);return{getData:async n=>{try{const o=await fetch("https://api.openweathermap.org/data/2.5/weather?APPID=3374f07f34f654b5b0cdc1faca7f5db0&units=metric&q="+n,{mode:"cors"}),r=await o.json();200===r.cod&&(e.city=r.name,e.country=r.sys.country,e.tempC=Math.round(r.main.temp),e.tempMaxC=Math.round(r.main.temp_max),e.tempMinC=Math.round(r.main.temp_min),e.tempF=t(r.main.temp),e.tempMaxF=t(r.main.temp_max),e.tempMinF=t(r.main.temp_min),e.description=r.weather[0].main,e.icon=r.weather[0].icon),e.cod=r.cod}catch(e){console.log(e)}return e}}})();(()=>{const t=document.querySelector("form"),n=document.getElementById("city-name"),o=t.querySelector(".error-messages"),r=document.querySelector(".weather"),c=r.querySelector(".location"),a=r.querySelector(".main-info"),i=a.querySelector(".icon"),m=i.querySelector("img"),s=i.querySelector(".description"),l=a.querySelector(".temp"),u=l.querySelector(".value"),d=l.querySelector(".units").querySelector(".celsius"),y=l.querySelector(".units").querySelector(".fahrenheit"),p=r.querySelector(".min-max"),q=p.querySelector(".min"),h=p.querySelector(".max");let S={},x="C";t.addEventListener("submit",(e=>{e.preventDefault(),f(n.value)})),d.addEventListener("click",(e=>{"C"!=x&&(x="C",C())})),y.addEventListener("click",(e=>{"F"!=x&&(x="F",C())}));const C=()=>{"C"===x&&(d.classList.add("selected"),y.classList.remove("selected")),"F"===x&&(y.classList.add("selected"),d.classList.remove("selected")),u.textContent=S["temp"+x],q.textContent=S["tempMin"+x]+"°",h.textContent=S["tempMax"+x]+"°"},f=async(t="Barcelona")=>{try{S=await e.getData(t),"404"===S.cod?o.textContent="Location not found":o.textContent="",c.textContent=S.city+", "+S.country,m.src="http://openweathermap.org/img/wn/"+S.icon+"@2x.png",s.textContent=S.description,C()}catch(e){console.log(e)}};return{load:f}})().load()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,